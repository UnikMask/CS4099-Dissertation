@article{DBLP_journal,
  author    = {Vlad Slavici and
               Daniel Kunkle and
               Gene Cooperman and
               Stephen A. Linton},
  title     = {Finding the Minimal {DFA} of Very Large Finite State Automata with
               an Application to Token Passing Networks},
  journal   = {CoRR},
  volume    = {abs/1103.5736},
  year      = {2011},
  url       = {http://arxiv.org/abs/1103.5736},
  eprinttype = {arXiv},
  eprint    = {1103.5736},
  timestamp = {Wed, 08 Sep 2021 16:22:47 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1103-5736.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inbook{albert_linton_ruškuc_2010,
  place={Cambridge},
  series={London Mathematical Society Lecture Note Series},
  title={On the permutational power of token passing networks},
  DOI={10.1017/CBO9780511902499.016},
  booktitle={Permutation Patterns},
  publisher={Cambridge University Press},
  author={Albert, Michael and Linton, Steve and Ruškuc, Nik},
  editor={Linton, Steve and Ruškuc, Nik and Vatter, VincentEditors},
  year={2010},
  pages={317–338},
	collection={London Mathematical Society Lecture Note Series}
}

@article{ATKINSON1997103,
  title = {Permutations generated by token passing in graphs},
  journal = {Theoretical Computer Science},
  volume = {178},
  number = {1},
  pages = {103-118},
  year = {1997},
  issn = {0304-3975},
  doi = {https://doi.org/10.1016/S0304-3975(96)00057-6},
  url = {https://www.sciencedirect.com/science/article/pii/S0304397596000576},
  author = {M.D. Atkinson and M.J. Livesey and D. Tulley},
  abstract = {A transportation graph is a directed graph with a designated input node and a designated output node. Initially, the input node contains an ordered set of tokens 1,2,3, … The tokens are removed from the input node in this order and transferred through the graph to the output node in a series of moves; each move transfers a token from a node to an adjacent node. Two or more tokens cannot reside on an internal node simultaneously. When the tokens arrive at the output node they will appear in a permutation of their original order. The main result is a description of the possible arrival permutations in terms of regular sets. This description allows the number of arrival permutations of each length to be computed. The theory is then applied to packet-switching networks and has implications for the resequencing problem. It is also applied to some complex data structures and extends previously known results to the case that the data structures are of bounded capacity. A by-product of this investigation is a new proof that permutations which avoid the pattern 321 are in one to one correspondence with those that avoid 312.}
}

@article{Ba2020OnTD,
  title={On The Distributed Determinization Of Large NFAs},
  author={Cheikh Ba and Abdoulaye Gueye},
  journal={2020 IEEE 14th International Conference on Application of Information and Communication Technologies (AICT)},
  year={2020},
  pages={1-6}
}

@article{A2022ACS,
  title={A Comparative Study of Large Automata Distributed Processing},
  author={C. A.},
  journal={2022 IEEE 16th International Conference on Application of Information and Communication Technologies (AICT)},
  year={2022},
  pages={1-6}
}

@inproceedings{Waton2007OnPC,
  title={On Permutation Classes Defined by Token Passing Networks, Gridding Matrices and Pictures: Three Flavours of Involvement},
  author={Steve Waton},
  year={2007}
}

@INPROCEEDINGS{508056,
  author={Ravikumar, B. and Xiong, X.},
  booktitle={Proceedings of International Conference on Parallel Processing},
  title={A parallel algorithm for minimization of finite automata},
  year={1996},
  volume={},
  number={},
  pages={187-191},
  doi={10.1109/IPPS.1996.508056}
}

@inproceedings{Slavici2012AnEP,
  title={An efficient programming model for memory-intensive recursive algorithms using parallel disks},
  author={Vlad Slavici and Daniel Kunkle and Gene Cooperman and Steve Linton},
  booktitle={International Symposium on Symbolic and Algebraic Computation},
  year={2012}
}

@inproceedings{Hopcroft1971AnNL,
  title={An n log n algorithm for minimizing states in a finite automaton},
  author={John E. Hopcroft},
  year={1971}
}

@inproceedings{Yingjie2009DescribingAN,
  title={Describing an n log n algorithm for minimizing states in deterministic finite automaton},
  author={Xu Yingjie},
  year={2009}
}

@article{REVUZ1992181,
title = {Minimisation of acyclic deterministic automata in linear time},
journal = {Theoretical Computer Science},
volume = {92},
number = {1},
pages = {181-189},
year = {1992},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(92)90142-3},
url = {https://www.sciencedirect.com/science/article/pii/0304397592901423},
author = {Dominique Revuz},
abstract = {We present a linear algorithm for the minimisation of acyclic deterministic automata. This algorithm can be used, in particular, on automaton representing lexicons.}
}

@article{GAPSystem,
author = {Linton, Steve},
title = {GAP: Groups, Algorithms, Programming},
year = {2007},
issue_date = {September 2007 issue 161},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {3},
issn = {1932-2240},
url = {https://doi.org/10.1145/1358190.1358201},
doi = {10.1145/1358190.1358201},
abstract = {GAP is a system for computational discrete algebra, with particular emphasis on Computational Group Theory. GAP provides a programming language, a library of thousands of functions implementing algebraic algorithms written in the GAP language, large data libraries of algebraic objects and a growing collection of user-contributed extension packages. GAP is widely used in research and teaching for studying groups and their representations, rings, vector spaces, algebras, combinatorial structures, codes, Lie algebras and more. It has been cited in over 800 published papers. The system, including source, is distributed freely. You can study and easily modify or extend it for your special use.},
journal = {ACM Commun. Comput. Algebra},
month = {sep},
pages = {108–109},
numpages = {2}
}
